// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  username        String   @unique
  password        String?  // Optional for Google OAuth users
  email           String?  @unique // For Google OAuth
  googleId        String?  @unique // Google OAuth ID
  discogsUsername String?
  avatar          String?  // URL or avatar identifier
  avatarType      String   @default("generated") // "generated", "uploaded", "url"
  
  // User preferences
  displayView     String   @default("grid") // "grid" or "list"
  recordsPerPage  Int      @default(20)
  showGenreChart  Boolean  @default(true)
  showDecadeChart Boolean  @default(true)
  showArtistChart Boolean  @default(true)
  discogsEnabled  Boolean  @default(true)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  vinyls          Vinyl[]
  collections     Collection[]
  
  // Friend relationships
  sentFriendRequests     Friend[] @relation("SentFriendRequests")
  receivedFriendRequests Friend[] @relation("ReceivedFriendRequests")
  
  // Social features
  favoriteVinyls  FavoriteVinyl[]
  recommendations Recommendation[] @relation("RecommendationSender")
  receivedRecommendations Recommendation[] @relation("RecommendationReceiver")
}

model Collection {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  imageUrl    String?  // Collection cover image
  color       String?  // Theme color (hex)
  isPublic    Boolean  @default(false) // Public/private collection
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Foreign key
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relations
  vinyls      Vinyl[]
  
  @@index([userId])
}

model Vinyl {
  id           Int      @id @default(autoincrement())
  discogsId    Int?
  artist       String
  title        String
  year         Int?
  imageUrl     String?
  genres       String   // JSON array stored as string
  
  // New manual fields
  trackList    String?  // JSON array stored as string
  description  String?  // Personal notes/description
  label        String?  // Record label
  format       String?  // LP, EP, 12", etc.
  condition    String?  // Mint, VG+, VG, etc.
  rating       Int?     // Personal rating 1-5
  purchaseDate DateTime?
  purchasePrice Float?
  purchaseLocation String?
  catalogNumber String?
  country      String?  // Country of release
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Foreign keys
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  collectionId Int?
  collection   Collection? @relation(fields: [collectionId], references: [id], onDelete: SetNull)
  
  // Social features
  favorites    FavoriteVinyl[]
  recommendations Recommendation[]
  
  @@index([userId])
  @@index([collectionId])
}

// Friends system
model Friend {
  id          Int      @id @default(autoincrement())
  status      String   // "pending", "accepted", "blocked"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Friend relationship
  senderId    Int
  sender      User     @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId  Int  
  receiver    User     @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  
  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
}

// User's favorite vinyls
model FavoriteVinyl {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  
  // Foreign keys
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vinylId   Int
  vinyl     Vinyl    @relation(fields: [vinylId], references: [id], onDelete: Cascade)
  
  @@unique([userId, vinylId])
  @@index([userId])
  @@index([vinylId])
}

// Recommendations between friends
model Recommendation {
  id          Int      @id @default(autoincrement())
  message     String?  // Optional message with the recommendation
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  // Foreign keys
  senderId    Int
  sender      User     @relation("RecommendationSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId  Int
  receiver    User     @relation("RecommendationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  vinylId     Int
  vinyl       Vinyl    @relation(fields: [vinylId], references: [id], onDelete: Cascade)
  
  @@index([senderId])
  @@index([receiverId])
  @@index([vinylId])
}